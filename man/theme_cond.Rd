% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nish.R
\name{theme_cond}
\alias{theme_cond}
\alias{ggplot_add.conditional_theme}
\title{Change theme settings conditional on the type of plot}
\usage{
\method{ggplot_add}{conditional_theme}(object, plot, object_name)
}
\arguments{
\item{object}{An object (theme) to add to the plot.}

\item{plot}{The ggplot object to add \code{object} to as an list component.}

\item{object_name}{The name of the object to add.}
}
\value{
A ggplot object.
}
\description{
Method to change theme settings conditional on the type of plot such as
geom, facet etc.
}
\details{
The original idea was to use:
\code{plot$theme <- ggplot2:::add_theme(plot$theme, object, "object")}
for this purpose but \code{ggplot2:::add_theme}() is an internal ggplot2
function and is not exported.

Instead, the current theme in \code{object} consist of \code{theme_nish_*}
settings. These theme properties are further modified based on the type of
plot requested in the ggplot2 call, i.e. based on the geom, facet etc.
outside the actual \code{theme_nish_*}() call, by this method.

\code{plot$theme} may initially (as input to this method) be an empty list if
no \code{theme}() calls have been performed or set by the user in the working
environment. The argument \code{object} always replaces an existing theme in
\code{plot$theme}.
}
\note{
Conditional theme settings does not work with \code{ggplot2::theme_set}().
Explicit \code{theme_nish_*()} call is required by the user to enable
conditional theme settings.
}
